from fastapi import FastAPI, HTTPException, Request
from openai import OpenAI

import os

def get_openai_response(prompt: str) -> str:
    """
    Function to interact with OpenAI's GPT-4 model and return a response.

    Args:
    - prompt (str): The message to send to OpenAI.

    Returns:
    - str: The response generated by OpenAI's GPT-4 model.
    """
    
    # Set your OpenAI API key
    client = OpenAI(api_key=os.environ.get("OPENAI_API_KEY"))

    # Send the prompt to GPT-4 model
    try:
        response = client.chat.completions.create(
            model="gpt-4o",
            
            messages=[
                {
                    "role": "system",
                    "content": prompt,
                }
            ],
            max_tokens=150,
            temperature=0.7,
            top_p=1
        )

        # Extract and return the response text
        return response.choices[0].message.content

    except Exception as e:
        raise RuntimeError(f"Error during OpenAI request: {str(e)}")

# Helper function to call OpenAI's GPT for summarization
def summarise_text(location_name: str, text_fragments: list[str]) -> str:
    # Join text fragments into one string
    combined_text = "\n".join(text_fragments)
    
    # Use OpenAI API to generate a summary
    prompt = f"Summarize what the following text says about {location_name}:\n{combined_text}"
    
    try:
        summary = get_openai_response(prompt)
        return summary
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Error generating summary: {str(e)}")
